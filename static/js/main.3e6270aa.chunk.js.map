{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","selectedPostId","className","length","map","post","userId","title","onClick","postId","id","type","BASE_URL","getUserPosts","a","fetch","response","json","getUsers","getPost","getComments","NewCommentForm","addNewComment","useState","nameText","setNameText","emailText","setEmailText","bodyText","setBodyText","onSubmit","event","preventDefault","newComment","Date","now","name","email","body","value","onChange","target","placeholder","required","PostDetails","setPost","comments","setComments","hideComments","setHideComments","useEffect","usersFromServer","commentsFromServer","comment","commentId","filter","UserSelect","users","selectedUser","selectedUserId","user","App","setPosts","setPostId","setUsers","setUserId","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e6270aa.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../Types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: number;\n  selectedPostId: (id: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  selectedPostId,\n}) => {\n  const selectPost = (postId: number) => (selectedPost === postId\n    ? selectedPostId(0)\n    : selectedPostId(postId));\n\n  return (\n    <div className=\"PostsList\">\n      {posts.length ? (\n        <>\n          <h2>Posts:</h2>\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li key={post.id} className=\"PostsList__item\">\n                <div>\n                  <b>\n                    {`[User #${post.userId}]:`}\n                  </b>\n                  {post.title}\n                </div>\n                <button\n                  onClick={() => selectPost(post.id)}\n                  type=\"button\"\n                  className={selectedPost === post.id\n                    ? 'PostsList__button button button--selected'\n                    : 'PostsList__button button'}\n                >\n                  {selectedPost === post.id ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : <h2>No posts.</h2>}\n    </div>\n  );\n};\n","export const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport async function getUserPosts(userId: number) {\n  let response;\n\n  if (userId === 0) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n}\n\nexport async function getUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n\nexport async function getPost(postId: number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n\nexport async function getComments(postId: number) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { Comment } from '../../Types/Comment';\n\ntype Props = {\n  addNewComment: (newComment: Comment) => void;\n  selectedPost: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addNewComment,\n  selectedPost,\n}) => {\n  const [nameText, setNameText] = useState('');\n  const [emailText, setEmailText] = useState('');\n  const [bodyText, setBodyText] = useState('');\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: selectedPost,\n      id: Date.now(),\n      name: nameText,\n      email: emailText,\n      body: bodyText,\n    };\n\n    addNewComment(newComment);\n    setNameText('');\n    setEmailText('');\n    setBodyText('');\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          value={nameText}\n          onChange={(event) => setNameText(event.target.value)}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={emailText}\n          onChange={(event) => setEmailText(event.target.value)}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={bodyText}\n          onChange={(event) => setBodyText(event.target.value)}\n          required\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getComments, getPost } from '../../api/api';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Comment } from '../../Types/Comment';\nimport { Post } from '../../Types/Post';\n\ntype Props = {\n  selectedPost: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hideComments, setHideComments] = useState(false);\n\n  useEffect(() => {\n    const usersFromServer = async () => {\n      setPost(await getPost(selectedPost));\n    };\n\n    usersFromServer();\n  }, [selectedPost]);\n\n  useEffect(() => {\n    const commentsFromServer = async () => {\n      setComments(await getComments(selectedPost));\n    };\n\n    commentsFromServer();\n  }, [selectedPost]);\n\n  const deleteComment = (commentId: number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n\n  const addComment = (newComment: Comment) => {\n    setComments([...comments, newComment]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {post?.id\n        ? (\n          <>\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{post.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length > 0\n                && (\n                  <button\n                    onClick={() => (hideComments\n                      ? setHideComments(false)\n                      : setHideComments(true))}\n                    type=\"button\"\n                    className=\"button\"\n                  >\n                    {!hideComments ? `Hide ${comments.length} comments` : `Show ${comments.length} comments`}\n                  </button>\n                )}\n\n              <ul className=\"PostDetails__list\">\n                {!hideComments && comments.map(comment => (\n                  <li className=\"PostDetails__list-item\">\n                    <button\n                      onClick={() => deleteComment(comment.id)}\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  addNewComment={addComment}\n                  selectedPost={selectedPost}\n                />\n              </div>\n            </section>\n          </>\n        )\n        : <h2>Select post.</h2>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { User } from '../../Types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: number;\n  selectedUserId: (id: number) => void;\n};\n\nexport const UserSelect: React.FC<Props> = ({\n  users,\n  selectedUser,\n  selectedUserId,\n}) => (\n  <label>\n    Select a user: &nbsp;\n\n    <select\n      className=\"App__user-selector\"\n      value={selectedUser}\n      onChange={(event) => selectedUserId(+event.target.value)}\n    >\n      <option value=\"0\">All users</option>\n      {users.map(user => (\n        <option value={user.id}>{user.name}</option>\n      ))}\n    </select>\n  </label>\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getUsers } from './api/api';\nimport { UserSelect } from './components/UserSelect';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([]);\n  const [postId, setPostId] = useState(0);\n\n  const [users, setUsers] = useState([]);\n  const [userId, setUserId] = useState(0);\n\n  useEffect(() => {\n    const postsFromServer = async () => {\n      setPosts(await getUserPosts(userId));\n    };\n\n    postsFromServer();\n  }, [userId]);\n\n  useEffect(() => {\n    const usersFromServer = async () => {\n      setUsers(await getUsers());\n    };\n\n    usersFromServer();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          users={users}\n          selectedUser={userId}\n          selectedUserId={setUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPost={postId}\n            selectedPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPost={postId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}